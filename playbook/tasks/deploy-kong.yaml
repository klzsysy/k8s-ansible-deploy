---
  - hosts: localhost
    connection: local
    gather_facts: no
    tasks:
      - name: try import cassandra
        shell: kubectl create -f ../template/yml_template/kong/cassandra.yaml
        ignore_errors: true
        register: cassandra

      - name: cassandra info
        debug:
          msg: cassandra Already exist, reinstall please delete the current
        when: cassandra.rc != 0

      - name: wait cassandra ready
        shell: kubectl -n default  get pod cassandra-0 | grep 1/1 -q
        register: cassandra_status
        until: cassandra_status.rc == 0
        retries: 30
        delay: 10

      - name: import kong-migration job
        shell: kubectl delete job kong-migration ; kubectl create -f ../template/yml_template/kong/kong_migration_cassandra.yaml
        when: cassandra.stdout.find("statefulset \"cassandra\" created") != -1

      - name: wait kong-migration ready
        shell:  kubectl get job -n default kong-migration | awk 'NR==2 {print $3}'
        register: kong_migration_status
        until: kong_migration_status.stdout.find("1") != -1
        retries: 60
        delay: 10
      
      - name: build external_ips string
        shell: echo '{{ kong_ip | default(ha_api_ip) }}' | sed 's/[,;]/\n/g' | sed 's/^[ t]*//g' | sed 's/[ t]*$//g' | sed 's/\(.*\)/    - \1/g'
        register: external_ips

      - name: build kong
        template:
          src:  ../template/yml_template/kong/kong_cassandra.yaml
          dest: ../generate/

      - name: try import kong
        shell:  kubectl -n default  apply -f ../generate/kong_cassandra.yaml
        ignore_errors: true

      - name: wait kong ready
        shell: kubectl -n default get pod | grep kong-rc | grep '1/1' | wc -l
        register: kong_status
        until: kong_status.stdout.find("3") != -1
        retries: 30
        delay: 10

      - name: import kong dashboard
        shell: kubectl -n default  apply -f ../template/yml_template/kong/kong-dashboard.yaml
        ignore_errors: true

      - name: wait kong dashboard ready
        shell: kubectl -n default get pod | grep kong-dashboard | grep '1/1'
        register: kong_bashboard
        ignore_errors: true
        until: kong_bashboard.rc == 0
        retries: 10
        delay: 5

      - name: "create k8s-bashboard api , address: https://{{ kong_ip }}:8000/dashboard"
        shell: bash ../tools/create_k8s_dashboard_api.sh {{ kong_ip }}
        ignore_errors: true
        register: k8s_bashboard
        until: k8s_bashboard.rc == 0
        retries: 10
        delay: 5

      - name: create kong dashboard api
        shell: bash ../tools/create_kong_dashboard_api.sh {{ kong_ip }}
        ignore_errors: true
        register: kong_bashboard_api
        until: kong_bashboard_api.rc == 0
        retries: 10
        delay: 5

      # show info
      - name: show kong api info from k8s dashboard
        debug:
          msg: "k8s dashboard address: https://{{ kong_ip }}:{{ kong_gw_https_port }}/dashboard"

      - name: show kong api info from kong dashboard
        debug:
          msg: "kong api gateway dashboard address: http://{{ kong_ip }}:{{ kong_gw_http_port }}/kong-dashboard/ , default user=admin password=k8s.kong, Defined in dashboard environment "

      - name: show cluster admin token
        shell: "kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}') | grep -A 10 token:"
        ignore_errors: true

      - name: show time
        debug:
          msg: enjoy!
        when: k8s_bashboard.rc == 0 and kong_bashboard_api.rc == 0